#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import time
import psutil
import logging
import requests
import argparse
import platform
import threading
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime
from collections import deque

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('monitor.log')
    ]
)
logger = logging.getLogger(__name__)

class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self):
        self.cpu_history = deque(maxlen=60)  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CPU –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        self.memory_history = deque(maxlen=60)  # –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        self.disk_history = deque(maxlen=60)  # –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
        
    def get_cpu_usage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ CPU"""
        return psutil.cpu_percent(interval=1)
        
    def get_memory_usage(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        memory = psutil.virtual_memory()
        return {
            'total': memory.total / (1024 * 1024 * 1024),  # GB
            'used': memory.used / (1024 * 1024 * 1024),    # GB
            'percent': memory.percent
        }
        
    def get_disk_usage(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞"""
        disk = psutil.disk_usage('/')
        return {
            'total': disk.total / (1024 * 1024 * 1024),  # GB
            'used': disk.used / (1024 * 1024 * 1024),    # GB
            'percent': disk.percent
        }
        
    def update_history(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫"""
        self.cpu_history.append(self.get_cpu_usage())
        self.memory_history.append(self.get_memory_usage()['percent'])
        self.disk_history.append(self.get_disk_usage()['percent'])
        
    def get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            'platform': platform.platform(),
            'python_version': platform.python_version(),
            'cpu_count': psutil.cpu_count(),
            'memory_total': psutil.virtual_memory().total / (1024 * 1024 * 1024)
        }

class ApplicationMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, url: str = 'http://localhost:8000'):
        self.url = url
        self.response_times = deque(maxlen=60)  # –ò—Å—Ç–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
        self.errors = deque(maxlen=100)  # –ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫
        
    def check_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            start_time = time.time()
            response = requests.get(self.url)
            response_time = time.time() - start_time
            
            self.response_times.append(response_time)
            
            return {
                'status': response.status_code,
                'response_time': response_time,
                'is_alive': response.status_code == 200
            }
        except Exception as e:
            self.errors.append({
                'time': datetime.now().isoformat(),
                'error': str(e)
            })
            return {
                'status': 0,
                'response_time': 0,
                'is_alive': False,
                'error': str(e)
            }
            
    def get_average_response_time(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞"""
        if not self.response_times:
            return 0
        return sum(self.response_times) / len(self.response_times)
        
    def get_error_rate(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—à–∏–±–æ–∫"""
        if not self.errors:
            return 0
        return (len(self.errors) / 100) * 100  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤

class ProcessMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    
    def __init__(self, process_name: str = 'python'):
        self.process_name = process_name
        self.processes = []
        
    def find_processes(self) -> List[psutil.Process]:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if self.process_name in proc.info['name'].lower():
                    if any('server.py' in cmd.lower() for cmd in proc.info['cmdline'] if cmd):
                        self.processes.append(proc)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        return self.processes
        
    def get_process_info(self, process: psutil.Process) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        try:
            memory_info = process.memory_info()
            return {
                'pid': process.pid,
                'cpu_percent': process.cpu_percent(),
                'memory_rss': memory_info.rss / (1024 * 1024),  # MB
                'memory_vms': memory_info.vms / (1024 * 1024),  # MB
                'threads': process.num_threads(),
                'connections': len(process.connections()),
                'open_files': len(process.open_files())
            }
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            return {}

class Monitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self, args):
        self.args = args
        self.system_monitor = SystemMonitor()
        self.app_monitor = ApplicationMonitor(args.url)
        self.process_monitor = ProcessMonitor()
        self.stats_file = Path('monitor_stats.json')
        self.is_running = False
        
    def save_stats(self, stats: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(stats, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            
    def format_stats(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        output = []
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        status = 'üü¢' if stats['application']['is_alive'] else 'üî¥'
        output.append(f"\n–°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {status}")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        output.append("\n–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:")
        output.append(f"CPU: {stats['system']['cpu_percent']}%")
        output.append(f"–ü–∞–º—è—Ç—å: {stats['system']['memory_percent']}%")
        output.append(f"–î–∏—Å–∫: {stats['system']['disk_percent']}%")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if stats['process']:
            output.append("\n–ü—Ä–æ—Ü–µ—Å—Å:")
            output.append(f"PID: {stats['process']['pid']}")
            output.append(f"CPU: {stats['process']['cpu_percent']}%")
            output.append(f"–ü–∞–º—è—Ç—å: {stats['process']['memory_rss']:.1f} MB")
            output.append(f"–ü–æ—Ç–æ–∫–∏: {stats['process']['threads']}")
            
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        output.append("\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        output.append(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {stats['application']['avg_response_time']*1000:.1f} –º—Å")
        output.append(f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {stats['application']['error_rate']:.1f}%")
        
        return '\n'.join(output)
        
    def collect_stats(self) -> Dict[str, Any]:
        """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        self.system_monitor.update_history()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        health = self.app_monitor.check_health()
        
        # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        processes = self.process_monitor.find_processes()
        process_info = {}
        if processes:
            process_info = self.process_monitor.get_process_info(processes[0])
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'timestamp': datetime.now().isoformat(),
            'system': {
                'cpu_percent': self.system_monitor.get_cpu_usage(),
                'memory_percent': self.system_monitor.get_memory_usage()['percent'],
                'disk_percent': self.system_monitor.get_disk_usage()['percent'],
                'cpu_history': list(self.system_monitor.cpu_history),
                'memory_history': list(self.system_monitor.memory_history),
                'disk_history': list(self.system_monitor.disk_history)
            },
            'application': {
                'is_alive': health['is_alive'],
                'status_code': health['status'],
                'response_time': health['response_time'],
                'avg_response_time': self.app_monitor.get_average_response_time(),
                'error_rate': self.app_monitor.get_error_rate(),
                'recent_errors': list(self.app_monitor.errors)
            },
            'process': process_info
        }
        
        return stats
        
    def monitor(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = True
        
        try:
            while self.is_running:
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.collect_stats()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.save_stats(stats)
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if not self.args.quiet:
                    os.system('cls' if os.name == 'nt' else 'clear')
                    print(self.format_stats(stats))
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if stats['system']['cpu_percent'] > 90:
                    logger.warning("–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU!")
                    
                if stats['system']['memory_percent'] > 90:
                    logger.warning("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!")
                    
                if not stats['application']['is_alive']:
                    logger.error("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!")
                    
                time.sleep(self.args.interval)
                
        except KeyboardInterrupt:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            self.is_running = False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Earth Telegram Mini App')
    
    parser.add_argument(
        '--url',
        default='http://localhost:8000',
        help='URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    )
    parser.add_argument(
        '--interval',
        type=int,
        default=5,
        help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö'
    )
    parser.add_argument(
        '--quiet',
        action='store_true',
        help='–ù–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å'
    )
    
    args = parser.parse_args()
    
    try:
        monitor = Monitor(args)
        monitor.monitor()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        sys.exit(1)

if __name__ == '__main__':
    main() 